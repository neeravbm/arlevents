<?php
/*
 * @file
 *   ACT OG
 */


/**
 * Implements hook_entity_view().
 */
function act_og_entity_view($entity, $type, $view_mode, $langcode) {
  // Set a breadcrumb for nodes in groups. We currently assume that
  // nodes are groups.
  if (is_numeric(arg(1)) && arg(0) == 'user' && arg(2) == 'dashboard') {
    $uid = arg(1);
    $account = user_load($uid);

    // Build Breadcrumbs
    $breadcrumb = array();
    $breadcrumb[] = l('Home', '<front>');
    $breadcrumb[] = l(format_username($account), 'user/' . $account->uid);
    // Set Breadcrumbs
    drupal_set_breadcrumb($breadcrumb);
  }
}

/**
 * Implements hook_permission().
 */
function act_og_permission() {
  return array(
    'view administer group tab' => array(
      'title' => t('View administer group tab'),
      'description' => t('View administer group content.'),
    ),
  );
}


/*
 * Implementation of hook_module_implements_alter()
 */
function act_og_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'entity_view') {
    $group = $implementations['act_og'];
    unset($implementations['act_og']);
    $implementations['act_og'] = $group;
  }
  if ($hook == 'menu_alter') {
    $group = $implementations['act_og'];
    unset($implementations['act_og']);
    $implementations['act_og'] = $group;
  }
  if ($hook == 'node_access') {
    $group = $implementations['act_og'];
    unset($implementations['act_og']);
    $implementations['act_og'] = $group;
  }
  /*if ($hook == 'admin_paths_alter') {
    $group = $implementations['act_og'];
    unset($implementations['act_og']);
    $implementations['act_og'] = $group;
  }*/
}


/**
 * Implements hook_menu().
 */
function act_og_menu() {
  $items = array();
  $items['group/%/%/admin/people/addpoc'] = array(
    'page callback' => 'drupal_get_form',
    'title' => 'Add POC',
    'page arguments' => array('_og_addpoc_users_form', 1, 2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'act_og_invite_people_user_access_group',
    'access arguments' => array('invite people', 1, 2),
  );
  return $items;
}


/**
 * Check if entity is a group, and user has permission - Access.
 */
function act_og_invite_people_user_access_group($perm, $group_type, $gid) {
  $group = entity_load_single($group_type, $gid);
  if (!$group || !og_is_group($group_type, $group)) {
    return FALSE;
  }

  // Extract the group's bundle.
  list(, , $bundle) = entity_extract_ids($group_type, $group);
  // Verify the bundle has roles
  if (!og_roles($group_type, $bundle, $gid)) {
    return FALSE;
  }

  $entity_info = entity_get_info($group_type);
  if (!$group_type || !$entity_info) {
    // Not a valid entity type.
    return FALSE;
  }
  return og_is_group($group_type, $gid) && og_user_access($group_type, $gid, $perm);
}


/*
 * Implements hook_menu_alter
 */
function act_og_menu_alter(&$items) {
  /*if (isset($items['node/%/group'])) {
    $items['node/%/group']['access callback'] = 'user_access';
    $items['node/%/group']['access arguments'] = array('view administer group tab');
  }*/
}


/*
 * Implements hook_admin_paths_alter()
 
function act_og_admin_paths_alter(&$paths) {
	
  if (isset($paths['node/%/group'])) {
    $paths['node/%/group']['access callback'] = 'user_access';
    $paths['node/%/group']['access arguments'] = array('view administer group tab');
  }
}
*/

/**
 * Form for email text field
 */
function _og_addpoc_users_form($form, &$form_state, $group_type, $gid) {
  og_set_breadcrumb($group_type, $gid, array(l(t('Group'), "$group_type/$gid/group")));
  $group = entity_load_single($group_type, $gid);
  $label = entity_label($group_type, $group);

  $form['group_type'] = array('#type' => 'value', '#value' => $group_type);
  $form['gid'] = array('#type' => 'value', '#value' => $gid);

  $form['addpoc_people'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add new users to %group', array('%group' => $label)),
  );

  $form['addpoc_people']['desc'] = array(
    '#markup' => t('Type in the message in the field below and press "Add User(s)". This message will be emailed to all the POCs in the system.'),
  );
  $form['addpoc_people']['addpoc'] = array(
    '#type' => 'textarea',
    '#title' => t('Request Message'),
    '#description' => t('Request Message'),
    '#required' => TRUE,
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Add user(s)'));

  return $form;
}


/**
 * _og_invite_people_new_users_form - Submit handler
 */
function _og_addpoc_users_form_submit($form, &$form_state) {
  $group_type = $form_state['values']['group_type'];
  $gid = $form_state['values']['gid'];
  $group = entity_load_single($group_type, $gid);
  $group_name = entity_label($group_type, $group);
  $message = $form_state['values']['addpoc'];
  // Add group membership form.

  $view = views_get_view('poc_user');
  $view->set_display("page");
  $view->render();
  $users = $view->result;

  $count = 0;
  if (count($users) > 0) {
    foreach ($users as $key => $value) {
      $account = user_load($value->users_field_data_field_organization_poc_uid);
      if (is_object($account)) {
        // Add group membership form. We still don't have the user or state.
        if ($gid && !og_is_member('node', $gid, 'user', $account, array(OG_STATE_ACTIVE))) { // added by devendra

          $status = _avectra_user_membership_status($account, $gid);

          if ($status) {
            og_group('node', $gid, array(
              'entity type' => 'user',
              'entity' => $account,
              'membership type' => OG_MEMBERSHIP_TYPE_DEFAULT,
            ));
          }
          //og_role_grant('node', $gid, $account->uid, 2);
        }
        $count += 1;

        $params = array(
          'account' => $account,
          'group_name' => $group_name,
          'group_type' => $group_type,
          'gid' => $gid,
          'message' => $message,

        );
        drupal_mail('act_og', 'group_addpoc_email', $account->mail, user_preferred_language($account), $params);
      }
    }
  }
  drupal_set_message(t('%user members have been created and invited to this group.', array('%user' => $count)));

}


/*
 * Implementing hook_form_alter().
 * Task:Show group list based on permission
 */
function act_og_form_alter(&$form, &$form_state, $form_id) {
  $hideEvent = FALSE;
  $GroupAudience_arr = array(
    'documents_node_form',
    'announcements_node_form',
    'blog_node_form',
    'forum_node_form',
    'event_node_form',
    'events_node_form',
    'meeting_node_form',
    'poll_node_form',
    'question_node_form',
    'quick_links_node_form',
    'wiki_node_form',
  );

  if (in_array($form_id, $GroupAudience_arr)) {
    if ($form_id == 'quick_links_node_form') {
      $hideEvent = TRUE;
    }
    $form['og_group_ref'][LANGUAGE_NONE][0]['default']['#options'] = getGroupAudience($form, $hideEvent, $form_id);
  }

}


/*
 * Update Group Audience options.
 * Task:Quick-Links should only show communities and sub-communities, not even events.
 */
function getGroupAudience($form, $hideEvent, $form_id) {
  $options = !empty($form['og_group_ref'][LANGUAGE_NONE][0]['default']['#options'])? $form['og_group_ref'][LANGUAGE_NONE][0]['default']['#options'] : array();

  unset($form['og_group_ref'][LANGUAGE_NONE][0]['default']['#options']);
  if ($hideEvent) {
    unset($options['Event']);
  }
  if (sizeof($options) > 0) {

    foreach ($options as $opt_key => $opt_val) {

      if (is_array($opt_val)) {
        foreach ($opt_val as $key => $value) {
          if (is_numeric($key)) {
            _act_og_process_group($options, $opt_key, $key, $form_id);
          }
        }
      }
      else {
        if (is_numeric($opt_key)) {
          _act_og_process_group($options, $opt_key, '', $form_id);
        }
      }

    }
  }

  return $options;
}

/*
 * Callback function to remove groups which are not published and user don't have permission
 */
function _act_og_process_group(&$options, $opt_key, $key = '', $form_id) {

  global $user;

  $form_id = explode('_', $form_id);
  $type = $form_id[0];

  if ($key != '') {
    $group = node_load($key);

    if ($group->status) {
      if (!og_user_access_entity("create $type content", "node", $group, $user)) {
        unset($options[$opt_key][$key]);
      }
    }
    else {
      unset($options[$opt_key][$key]);
    }

  }
  else {
    $group = node_load($opt_key);
    if ($group->status) {
      if (!og_user_access_entity("create $type content", "node", $group, $user)) {
        unset($options[$opt_key]);
      }
    }
    else {
      unset($options[$opt_key]);
    }
  }

}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function act_og_form_og_ui_add_users_alter(&$form, &$form_state) {
  $form['#submit'][] = 'act_og_send_group_welcome_email';
}

/**
 * Sends a welcome email to the user on joining the group.
 */
function act_og_send_group_welcome_email($form, &$form_state) {
  $account = user_load_by_name($form_state['values']['name']);
  $group_type = $form_state['values']['group_type'];
  $gid = $form_state['values']['gid'];
  $state = $form_state['values']['state'];
  $group = entity_load_single($group_type, $gid);
  $group_name = entity_label($group_type, $group);
  $from = 'act-iac@actgov.org';

  $params = array(
    'account' => $account,
    'group_name' => $group_name,
    'group_type' => $group_type,
    'gid' => $gid,
    'state' => $state,
  );
  drupal_mail('act_og', 'group_welcome_email', $account->mail, user_preferred_language($account), $params, $from, $send = TRUE);
}

/**
 * Implements hook_mail().
 */
function act_og_mail($key, &$message, $params) {
  switch ($key) {
    case 'group_welcome_email':
      global $base_url;
      $message['subject'] = t('Welcome to @group_name', array('@group_name' => $params['group_name']));
      $message['body'][] = t('Hi, @name!', array('@name' => format_username($params['account'])));
      $message['body'][] = $params['message'];
      $message['body'][] = t('You are invited to !link.', array('!link' => $base_url . '/' . $params['group_type'] . '/' . $params['gid']));
      $message['body'][] = t('- @site_name', array('@site_name' => variable_get('site_name', 'ACT-IAC')));
      break;

    case 'group_addpoc_email':
      $message['subject'] = t('Welcome to @group_name', array('@group_name' => $params['group_name']));
      $message['body'][] = t('Hi, @name!', array('@name' => format_username($params['account'])));
      $message['body'][] = $params['message'];
      $message['body'][] = t('- @site_name', array('@site_name' => variable_get('site_name', 'ACT-IAC')));
      break;
  }
}


/*
 * hook_node_access()
 */
function act_og_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;

  if ($type == 'documents' && $op != 'create') {
    $group = field_get_items('node', $node, 'og_group_ref');
    $group = $group[0]['target_id'];
    $gid = $group;
    $government_only = field_get_items('node', $node, 'field_view_government_only');
    $government_only = $government_only[0]['value'];
    $is_member = og_is_member('node', $gid, 'user', $account);

    if ($op == 'view' && $government_only == 1 && $is_member) {
      if (user_access('view government documents', $account)) {
        return NODE_ACCESS_ALLOW;
      }
      else {
        return NODE_ACCESS_DENY;
      }
    }
    elseif ($op == 'view') {
      if (user_access('view government documents', $account) || $is_member) {
        return NODE_ACCESS_ALLOW;
      }
      else {
        return NODE_ACCESS_DENY;
      }
    }
    elseif ($op == 'update' && $government_only == 1) {
      if (user_access('view government documents', $account)) {
        return NODE_ACCESS_ALLOW;
      }
      else {
        return NODE_ACCESS_DENY;
      }
    }
    elseif ($op == 'update') {
      if (user_access('view government documents', $account) || $is_member) {
        return NODE_ACCESS_ALLOW;
      }
      else {
        return NODE_ACCESS_DENY;
      }
    }
  }
  // Returning nothing from this function would have the same effect.
  return NODE_ACCESS_IGNORE;
}


/*
 * Assign the users of parent group to sub-community on updating
 */
function act_og_node_update($node) {
  if ($node->type == 'sub_community') {
    $auto_subscribe = $node->field_autosubscribe['und'][0]['value'];
    $parent_gid = $node->og_group_ref['und'][0]['target_id'];
    $group_visibility = $node->group_access['und'][0]['value'];
    $gid = $node->nid;
    //print('<pre>');
    $parent_members = _get_users_in_group($parent_gid);
    //print_r($parent_members);
    $members = _get_users_in_subgroup($gid);
    //print_r($members);

    $diff_members = array_diff($members, $parent_members);
    //print_r($diff_members);
    if (($node->type == 'sub_community') && ($auto_subscribe == 1) && ($group_visibility == 0)) {
      foreach ($diff_members as $uid) {
        if (!array_intersect($diff_members, $parent_members)) {
          unsubscribeMembershipsForUserSubgroup($uid, $gid);
        }
      }

      foreach ($parent_members as $uid) {
        getMembershipsForUserSubgroup($uid, $gid);
      }
    }

    	// Give the Permission to Leaders
        $only_members = $new_members = array();

        // Collect all members of that committee before updating
        $old_members = _get_users_in_subgroup($node->nid);

        $items = field_get_items('node', $node, 'field_leadership');
        if(count($items) > 1){
            foreach($items as $item) {
                $fc = field_collection_field_get_entity($item);
                $data = $fc->field_leader;
                $new_members[$data['und'][0]['target_id']] = $data['und'][0]['target_id'];

            }
        }elseif(count($items) == 1){
            $new_members[$items[0]['value']] = $items[0]['value'];
        }
        // Renvoke all the Roles
        foreach($old_members as $key=>$uid){
            $rid = 48;
            og_role_revoke('node', $node->nid, $uid, $rid);
        }
        // Assign Rols to Users
        foreach($new_members as $uid=>$value){
            $rid = 48;
            og_role_grant('node', $node->nid, $uid, $rid);
        }

  }
}


/*
 * Assign the users of parent group to sub-community on adding
 */
function act_og_node_insert($node) {
  $auto_subscribe = $node->field_autosubscribe['und'][0]['value'];
  $parent_gid = $node->og_group_ref['und'][0]['target_id'];
  $group_visibility = $node->group_access['und'][0]['value'];
  $gid = $node->nid;

  $members = _get_users_in_group($parent_gid);

  if (($node->type == 'sub_community') && ($auto_subscribe == 1) && ($group_visibility == 0)) {
    foreach ($members as $uid) {
      getMembershipsForUserSubgroup($uid, $gid);
    }
  }
}


/*
 * Get Memberships For User
 */
function getMembershipsForUserSubgroup($uid, $gid) {

  if ($gid) {
    $account = user_load($uid);
    $node_title = node_title_by_nid($gid);
    // check membership status id true then associated user to drupal community
    $extra = array(
      'entity type' => 'user',
      'entity' => $account,
      'membership type' => OG_MEMBERSHIP_TYPE_DEFAULT,
    );
    og_group('node', $gid, $extra);
    //og_role_grant('node', $gid, $account->uid, 2);
    drupal_set_message(t('You (Uid @uid) have get membership of @title.', array(
      '@title' => $node_title,
      '@uid' => $uid
    )));

  }
}


/*
 * Get Memberships For User
 */
function unsubscribeMembershipsForUserSubgroup($uid, $gid) {
  if ($gid) {
    og_ungroup('node', $gid, 'user', $uid);
    $node = node_load($gid);
    drupal_set_message(t('You (Uid @uid) have unsubscribed from @title.', array(
      '@title' => $node->title,
      '@uid' => $uid
    )));
  }
}

/**
 * Get all users of a group
 */
function _get_users_in_subgroup($gid) {

  $query = db_select('users', 'u')
    ->condition('u.uid', 0, '<>')
    ->condition('u.status', 1, '=')
    ->fields('u', array('uid'));
  $query->join('og_membership', 'ogm', "ogm.gid = :gid AND u.uid = ogm.etid AND ogm.entity_type = 'user'", array(':gid' => $gid));
  $query->join('node', 'node', "node.nid = :gid AND node.type = 'sub_community'", array(':gid' => $gid));

  return $query->execute()->fetchCol();
}
