<?php
/*
 * @file
 *   ACT Committee API
 */

function committee_api_init() {
  //global $user;
  //$account = user_load($user->uid);
  //$user_groups = og_get_groups_by_user($account);
  //dsm($user_groups);
  //addupdateCommittee_by_getCommitteeList();
}

/**
 * Get committees that need to be updated.
 */
function get_committees_to_be_updated() {
  // Timestamp for 5 days ago
  $fromTime = strtotime('-3 day');
  $cmtnodes = array();

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'group')
    ->propertyCondition('changed', $fromTime, '<=')
    /*->entityCondition('entity_id', 9613)*/
    ->range(0, 50);

  $result = $query->execute();

  if (isset($result['node'])) {
    $cmtnodes = entity_load('node', array_keys($result['node']));
  }

  $cmtnodes = entity_load('node', array(9603));

  return $cmtnodes;
}

/**
 * function to add/update commitee. If the commitee key already exist then update else add.
 */
function addupdateCommittee_by_getCommitteeList() {

  $cmtnodes = get_committees_to_be_updated();
  $nodeToUnpublish = array();

  if (!empty($cmtnodes)) {

    module_load_include('php', 'avectra', 'includes/ACT');
    $act = new ACT(SOAPURL, XWEBUSER, XWEBPASS);

    foreach ($cmtnodes as $node) {

      $cmt_key = !empty($node->field_community_key[LANGUAGE_NONE][0]['value']) ? $node->field_community_key[LANGUAGE_NONE][0]['value'] : '';

      if (empty($cmt_key)) {
        continue;
      }

      $committee = $act->getCommitteeDetails($cmt_key);

      // Skip and unpublished committees if they are closed/deleted or have no info
      if ($committee == '' || (is_object($committee) && (string) $committee->getIsDeleted() == '1')) {
        $nodeToUnpublish[] = $node;
        continue;
      }

      add_to_node_from_committee($committee, $node);

      // Collect all members of that committe before updating
      $old_members = _get_users_in_group($node->nid);

      $output = update_committee_leadership($act, $cmt_key, $node);
      node_save($node);
      associate_members_with_committee($node, $old_members, $output['members'], $output['only_members']);
    }

    // We need to unpublish the events.
    unpublish_nodes($nodeToUnpublish);
  }
}

/**
 * Delete committee leadership.
 */
function delete_committee_leadership(&$node) {
  $reflink = array();
  foreach ($node->field_leadership[LANGUAGE_NONE] as $value) {
    $reflink[] = $value['value'];
    /*$leadership = entity_load('field_collection_item', array($value['value']));
    $leadership = $leadership[$value['value']];
    $leader_uid = $leadership->field_leader['und'][0]['target_id'];
    $reflink_uid[$leader_uid] = $leader_uid;*/
  }
  entity_delete_multiple('field_collection_item', $reflink);
  $node->field_leadership[LANGUAGE_NONE] = array();
}

/**
 * Creates committee leadership.
 */
function create_committee_leadership(&$node, $pos, $uid) {
  // Add field collection
  $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_leadership')); // Create new field collection item.
  $field_collection_item->setHostEntity('node', $node); // Attach it to the node.

  $field_collection_item->field_position[LANGUAGE_NONE][]['value'] = $pos;
  $field_collection_item->field_leader[LANGUAGE_NONE][]['target_id'] = $uid;
  //$field_collection_item->save();
}

/**
 * Update committee leadership.
 */
function update_committee_leadership($act, $cmt_key, &$node) {

  $committee_position = $act->getCommitteeMembers($cmt_key);

  // Removing existing leadership references, first delete entities then remove references
  if (!empty($node->field_leadership)) {
    delete_committee_leadership($node);
  }

  $members = array();
  $only_members = array();
  foreach ($committee_position as $commpos) {

    $ukey = (string) $commpos->cmc_cst_key;
    $pos = (string) $commpos->cpo_code;

    $uid = getUidByKey($ukey);

    if ($uid == '' || $pos == '') {
      continue;
    }

    $members[$uid] = $uid; // Collect every member to make them member role in that committee

    if (strtolower($pos) == 'member') {
      $only_members[$uid] = $uid;
      continue;
    }

    create_committee_leadership($node, $pos, $uid);
  }

  return array('only_members' => $only_members, 'members' => $members);
}

/**
 * Function to add to node from committee object.
 */
function add_to_node_from_committee($committee, &$node) {
  $end_date = (string) $committee->getEndDate();

  $end_date_db = '';
  if (!empty($end_date)) {
    $end_date = strtotime($end_date);
    $end_date_db = date('Y-m-d h:i:s', $end_date); //2013-07-15 08:30:00
  }

  $node->status = ($end_date && (time() > $end_date)) ? 0 : 1;
  $node->path['pathauto'] = FALSE;
  $node->title = (string) $committee->getName();
  $node->body[$node->language][0]['value'] = (string) $committee->getDescription();
  $node->field_community_key[$node->language][0]['value'] = (string) $committee->getKey();
  $node->field_asncode[$node->language][0]['value'] = (string) $committee->getASNCode();
  $node->field_committee_code[$node->language][0]['value'] = (string) $committee->getCode();
  $node->field_committee_ctpcode[$node->language][0]['value'] = (string) $committee->getCTPCode();

  if ($end_date) {
    $node->field_committee_end_date[$node->language][0]['value'] = $end_date_db;
  }
  //$node->field_committee_end_date[$node->language][0]['value2'] = (string) $committee->getEndDate();

  /********* Default and required fields ****** */
  /*$node->og_roles_permissions[$node->language][0]['value'] = 0;
  $node->field_my_interests[$node->language][0]['tid'] = 19;
  $node->group_access[$node->language][0]['value'] = 0;*/
}

/**
 * Unpublish the nodes.
 */
function unpublish_nodes($nodeToUnpublish) {
  if (sizeof($nodeToUnpublish)) {
    foreach ($nodeToUnpublish as $node) {
      $node->status = 0;
      node_save($node);
    }
  }
}

/**
 * Function to associate members with committee.
 */
function associate_members_with_committee($node, $old_members, $members, $onlymember) {
// Associate members to that committee
  if (!empty($members)) {
    $gid = $node->nid;
    foreach ($members as $uid) {
      $account = user_load($uid);
      if ($gid && !og_is_member('node', $gid, 'user', $account, array(OG_STATE_ACTIVE))) {
        $status = _avectra_user_membership_status($account, $gid);
        if ($status) {
          og_group('node', $gid, array(
            'entity type' => 'user',
            'entity' => $account,
            'membership type' => OG_MEMBERSHIP_TYPE_DEFAULT,
          ));
        }
      }
    }
  }

  if (!empty($old_members)) {
    foreach ($old_members as $uid) {
      // If old leadership uid still exist in onlymember role then change their role to member only
      if (isset($onlymember[$uid])) {
        og_role_revoke('node', $node->nid, $uid, 3);
        og_role_revoke('node', $node->nid, $uid, 48);
      }
      else {
        if (!isset ($members[$uid])) {
          // If old leadership uid not coming now then remove them from drupal membership
          og_ungroup('node', $node->nid, 'user', $uid);
        }
      }

    }
  }
}

/**
 * Function to associate members with committee.
 */
function associate_members_with_committee1($node, $old_members, $members, $onlymember) {
// Associate members to that committee
  if (!empty($members)) {
    $gid = $node->nid;
    foreach ($members as $uid) {
      $account = user_load($uid);
      if ($gid && !og_is_member('node', $gid, 'user', $account, array(OG_STATE_ACTIVE))) {
        $status = _avectra_user_membership_status($account, $gid);
        if ($status) {
          og_group('node', $gid, array(
            'entity type' => 'user',
            'entity' => $account,
            'membership type' => OG_MEMBERSHIP_TYPE_DEFAULT,
          ));
        }
      }
    }
  }

  if (!empty($old_members)) {
    foreach ($old_members as $uid) {
      // If old leadership uid still exist in onlymember role then change their role to member only
      if (isset($onlymember[$uid])) {
        og_role_revoke('node', $node->nid, $uid, 3);
        og_role_revoke('node', $node->nid, $uid, 48);
      }
      else {
        if (!isset ($members[$uid])) {
          // If old leadership uid not coming now then remove them from drupal membership
          og_ungroup('node', $node->nid, 'user', $uid);
        }
      }

    }
  }
}

/*
 * Get recent committee 
 */
function committee_api_getRecentCommittees() {

  module_load_include('php', 'avectra', 'includes/ACT');
  module_load_include('php', 'avectra', 'includes/Profile');
  $now = time();
  $act = new ACT(SOAPURL, XWEBUSER, XWEBPASS);
  $end_date = '';
  $end_date_db = '';

  $cmsaved = $csaved = array();

  $createdFrom = variable_get('avectra_update_committe_timestamp', $now - (30 * 365 * 24 * 60 * 60));

  $createdTo = min($now, $createdFrom + ((6 * 30 * 24 * 60 * 60) + 3));

  $createdFrom = date('Y-m-d H:i:s', $createdFrom);
  $createdTo = date('Y-m-d H:i:s', $createdTo);

  $committeeObject = $act->getCommitteesCreatedBetween($createdFrom, $createdTo);

  foreach ($committeeObject as $committee) {

    if (is_object($committee)) {

      $node = array();

      $key = (string) $committee->getKey();

      $end_date = (string) $committee->getEndDate();
      if (!empty($end_date)) {
        $end_date = strtotime($end_date);
        $end_date_db = date('Y-m-d h:i:s', $end_date); //2013-07-15 08:30:00
      }
      $current = time();

      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'group')
        ->fieldCondition('field_community_key', 'value', $key, '=');
      $result = $query->execute();

      if (isset($result['node'])) {
        $nid = array_keys($result['node']);
        $node = node_load($nid[0]);
      } // end if


      if (empty($node)) {
        $node = new stdClass();
        $node->type = 'group';
        $node->promote = 1;
        $node->sticky = 0;
        $node->language = LANGUAGE_NONE;
        $node->uid = 1;
        $node->created = REQUEST_TIME;
        $node->og_roles_permissions[$node->language][0]['value'] = 0;
        $node->group_access[$node->language][0]['value'] = 1;
      }

      $node->status = ($end_date && $current > $end_date) ? 0 : 1;
      $node->path['pathauto'] = FALSE;
      $node->title = (string) $committee->getName();
      $node->body[$node->language][0]['value'] = (string) $committee->getDescription();
      $node->field_community_key[$node->language][0]['value'] = (string) $committee->getKey();
      $node->field_asncode[$node->language][0]['value'] = (string) $committee->getASNCode();
      $node->field_committee_code[$node->language][0]['value'] = (string) $committee->getCode();
      $node->field_committee_ctpcode[$node->language][0]['value'] = (string) $committee->getCTPCode();
      if ($end_date) {
        $node->field_committee_end_date[$node->language][0]['value'] = $end_date_db;
      }
      //$node->field_committee_end_date[$node->language][0]['value2'] = (string) $committee->getEndDate();

      $committee_position = $act->getCommitteeMembers($key);

      $old_members = array();
      if (isset($node->nid)) {
        // Collect all members of that committe before updating
        $old_members = _get_users_in_group($node->nid);
      }
      // Removing existing leadership refrences, first delete entites then remove references
      if (!empty($node->field_leadership)) {
        foreach ($node->field_leadership['und'] as $value) {
          $reflink[] = $value['value'];
          /*$leadership = entity_load('field_collection_item', array($value['value']));
          $leadership = $leadership[$value['value']];
          $leader_uid = $leadership->field_leader['und'][0]['target_id'];
          $reflink_uid[$leader_uid] = $leader_uid;*/
        }
        entity_delete_multiple('field_collection_item', $reflink);
        $node->field_leadership['und'] = array();
      }

      foreach ($committee_position as $commpos) {

        $ukey = (string) $commpos->cmc_cst_key;

        $uid = getUidByKey($ukey);
        $pos = (string) $commpos->cpo_code;

        if ($uid == '' || $pos == '') {
          continue;
        }

        $members[$uid] = $uid;

        if (strtolower($pos) == 'member') {
          $onlymember[$uid] = $uid;
          continue;
        }

        $members[$uid] = $uid;
        // Add field collection
        $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_leadership')); // Create new field collection item.
        $field_collection_item->setHostEntity('node', $node); // Attach it to the node.

        $field_collection_item->field_position[LANGUAGE_NONE][]['value'] = $pos;
        $field_collection_item->field_leader[LANGUAGE_NONE][]['target_id'] = $uid;
        //$field_collection_item->save();
      }

      node_save($node);

      // Associate members to that committe
      if (!empty($members)) {
        $gid = $node->nid;
        foreach ($members as $uid) {
          $account = user_load($uid);
          if ($gid && !og_is_member('node', $gid, 'user', $account, array(OG_STATE_ACTIVE))) { // added by devendra
            $status = _avectra_user_membership_status($account, $gid);
            if ($status) {

              og_group('node', $gid, array(
                'entity type' => 'user',
                'entity' => $account,
                'membership type' => OG_MEMBERSHIP_TYPE_DEFAULT,
              ));
            }
          }
        }
      }

      if (!empty($old_members)) {
        foreach ($old_members as $uid) {
          // If old leadership uid still exist in onlymember role then change their role to member only
          if (isset($onlymember[$uid])) {
            og_role_revoke('node', $node->nid, $uid, 3);
            og_role_revoke('node', $node->nid, $uid, 48);
          }
          else {
            if (!isset ($member[$uid])) {
              // If old leadership uid not coming now then remove them from drupal membership
              og_ungroup('node', $node->nid, 'user', $uid);
            }
          }

        }
      }

    }
    // end if
  } // end foreach

  variable_set('avectra_update_committe_timestamp', strtotime($createdTo));
}


/**
 * Implements hook_cronapi().
 * Using ultimate cron
 */
function committee_api_cronapi($op, $function = NULL) {
  switch ($op) {
    case 'list':
      return array(
        'addupdateCommittee_by_getCommitteeList' => 'Update Committee',
        'committee_api_getRecentCommittees' => 'Add Recent Committee',
        'getCommitteePublishUnpublish' => 'Committee Publish Unpublish',

      );

    case 'rule':
      switch ($function) {
        case 'addupdateCommittee_by_getCommitteeList':
          return '59 0-5 * * *';
        case 'committee_api_getRecentCommittees':
          return '59 0-5 * * *';
        case 'getCommitteePublishUnpublish':
          return '59 0-5 * * *';

      }
      break;

    case 'execute':
      switch ($function) {
        case 'addupdateCommittee_by_getCommitteeList':
          addupdateCommittee_by_getCommitteeList();
          break;
        case 'committee_api_getRecentCommittees':
          committee_api_getRecentCommittees();
          break;
        case 'getCommitteePublishUnpublish':
          getCommitteePublishUnpublish();
          break;

      }
      break;
  }
}

/*
 * Get uid from key;
 * @para $key
 *   customer key
 * @return $user_id;
 *   user id
 */
function getUidByKey($key) {
  $uid = array();
  $user_id = '';
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'user')
    ->entityCondition('bundle', 'user')
    //->propertyCondition('status', 1)
    ->fieldCondition('field_customer_key', 'value', $key, '=');
  $result = $query->execute();
  if (isset($result['user'])) {
    $uid = array_keys($result['user']);
  }
  if (isset($uid[0])) {
    $user_id = $uid[0];
  }

  return $user_id != '' ? $user_id : NULL;
}


/*
 * Get group id from key;
 * @para $key
 *   group key
 * @return $gid;
 *   group id
 */
function getGidByKey($key) {

  $gid = '';

  $query = db_select('node', 'node');
  $query->join('field_data_field_community_key', 'field_community_key', 'field_community_key.entity_id = node.nid');
  $query->condition('field_community_key.field_community_key_value', $key)
    ->fields('node', array('nid'));
  $result = $query->execute()->fetchCol();

  if (!empty($result)) {
    $gid = current($result);
  }

  return $gid;
}


/*
 * Get Memberships For User 
 
function getMembershipsForUser($customerKey){
  module_load_include('php', 'avectra', 'includes/ACT'); 
  module_load_include('php', 'avectra', 'includes/Profile');
  $act = new ACT(SOAPURL, XWEBUSER, XWEBPASS);
  $uid = '';
  $gid = '';
  $user_groups = array();
  $uid = getUidByKey($customerKey);
  if($uid){
    $account = user_load($uid);
    $user_groups = og_get_groups_by_user($account);
   }
  $getMembershipsForUserObj = $act->getMembershipsForUser($customerKey);
  
  if(sizeof($getMembershipsForUserObj)){
  foreach($getMembershipsForUserObj as $obj) {
	$cKey = $obj->getKey();
    $gid = getGidByKey($cKey);
      if($gid && !og_is_member('node', $gid, 'user', $account, array(OG_STATE_ACTIVE))){ // added by devendra
		$status =  _avectra_user_membership_status($account, $gid);
		if($status) {
		  og_group('node',$gid, array(
				'entity type' => 'user',
				'entity' => $account,
				'membership type'   => OG_MEMBERSHIP_TYPE_DEFAULT,
			));
		 og_role_grant('node', $gid, $account->uid, 2);	
		}
	  }
	  // get associated group lists
	  if(array_key_exists('node', $user_groups) && sizeof($user_groups['node']) > 0){
	    if(in_array($gid, $user_groups['node'])) {  
		  unset($user_groups['node'][$gid]);
	    }
      }
      
       
  }
 }
  //Delete an association (e.g. unsubscribe) of an entity to a group.
  if(array_key_exists('node', $user_groups) && sizeof($user_groups['node']) > 0){
	foreach($user_groups['node'] as $key => $val){
	  $node = node_load($val);
	    if($node->type == 'group'){
	      og_ungroup('node', $val, 'user', $account->uid);
	    }
	}
  }
  
}
*/

/**
 * function to get node type by node nid
 * @para $nid
 *   node nid
 * @return $nodetype
 *   node type (i.e. page, events or group)
 */
function node_type_by_nid($nid) {
  $nodetype = db_select('node', 'node')
    ->fields('node', array('type'))
    ->condition('node.nid', $nid, '=')
    ->execute()
    ->fetchField();
  return $nodetype;
}


/**
 * function to get node title by node nid
 * @para $nid
 *   node nid
 * @return $nodetitle
 *   node title
 */
function node_title_by_nid($nid) {
  $nodetitle = db_select('node', 'node')
    ->fields('node', array('title'))
    ->condition('node.nid', $nid, '=')
    ->execute()
    ->fetchField();
  return $nodetitle;
}


/*
 * Get Memberships For User 
 */
function getMembershipsForUser($customerKey) {

  module_load_include('php', 'avectra', 'includes/ACT');
  module_load_include('php', 'avectra', 'includes/Profile');
  $act = new ACT(SOAPURL, XWEBUSER, XWEBPASS);
  $uid = '';
  $gid = '';
  $account = NULL;
  $final_arr = array();
  $filter_nodetype = array('events', 'sub_community');
  $uid = getUidByKey($customerKey);
  if ($uid) {
    $account = user_load($uid);
    $user_groups = og_get_groups_by_user($account);
  }

  $avectra_groups = array();

  $getCommitteesForUserObj = $act->getCommitteesForUser($customerKey);

  $user_groups = og_get_groups_by_user($account);
  $user_groups = $user_groups['node'];

  foreach ($getCommitteesForUserObj as $k => $v) {

    $cKey = (string) $v;
    $gid = getGidByKey($cKey);

    $avectra_groups[$gid] = $cKey;
  }

  if (!empty($user_groups)) {
    foreach ($user_groups as $gid) {
      // get node type of this group
      $nodetype = node_type_by_nid($gid);
      // prevent og_ungroup functionality to events and sub_community nodes
      if (!in_array($nodetype, $filter_nodetype)) {
        // og_ungroup if not found in avectra group
        if (!isset($avectra_groups[$gid])) {
          og_ungroup('node', $gid, 'user', $account->uid);
        }
        else {
          unset($avectra_groups[$gid]);
        }
      }
    }
  }
  // check membership status id true then associated user to drupal community
  if (!empty($avectra_groups)) {
    foreach ($avectra_groups as $gid => $cKey) {
      $gload = array();

      if ($gid) {
        $node_title = node_title_by_nid($gid);
        // check membership status id true then associated user to drupal community
        $status = _avectra_user_membership_status($account, $gid);
        if ($status) {
          $extra = array(
            'entity type' => 'user',
            'entity' => $account,
            'membership type' => OG_MEMBERSHIP_TYPE_DEFAULT,
          );
          og_group('node', $gid, $extra);
          //og_role_grant('node', $gid, $account->uid, 2);
          drupal_set_message(t('You have get membership of @title.', array('@title' => $node_title)));
        }
        else {
          drupal_set_message(t('You cannot get membership of @title as you are in nomination queue.', array('@title' => $node_title)));
        }
      }

    }
  }
}

/*
 * function to Delete an association (e.g. unsubscribe) of an entity to a group.
 */
function communitee_api_ungroup_user($account, $getCommitteesForUserObj) {
  $output = '';
  $user_groups = '';
  $gid_key_arr = array();
  $user_groups = og_get_groups_by_user($account);
  if (sizeof($getCommitteesForUserObj)) {
    foreach ($getCommitteesForUserObj as $k => $v) {
      $cKey = (string) $v;
      $gid = getGidByKey($cKey);
      $gid_key_arr[$gid] = $gid;
    }
  }

  //Delete an association (e.g. unsubscribe) of an entity to a group.
  if (!empty($user_groups) && sizeof($user_groups['node']) > 0) {
    //if(array_key_exists('node', $user_groups) && sizeof($user_groups['node']) > 0){
    foreach ($user_groups['node'] as $key => $val) {
      //$node = node_load($val);
      // get node type of this group
      $nodetype = node_type_by_nid($val);
      if ($nodetype == 'group') {
        if (!in_array($val, $gid_key_arr)) {
          og_ungroup('node', $val, 'user', $account->uid);
        }
      }
    }
  }

  return $output;
}


/*
 * Get Organization detail from customer_key;
 * @para $customer_key
 *   customer key
 * @return array $organization;
 *   associative array contains org details.
 */
function getUserOrgDetails($customerKey) {
  module_load_include('php', 'avectra', 'includes/ACT');
  module_load_include('php', 'avectra', 'includes/Profile');
  $act = new ACT(SOAPURL, XWEBUSER, XWEBPASS);
  $organization = array();
  $profObject = $act->getProfileInfo($customerKey);
  $orgKey = $profObject->getOrganizationKey();
  $orgObject = $act->getOrganizationInfo($orgKey);
  $organization['getName'] = $orgObject->getName();
  $organization['getDateFounded'] = $orgObject->getDateFounded();
  $organization['getDescription'] = $orgObject->getDescription();
  $organization['getNumEmployees'] = $orgObject->getNumEmployees();
  $organization['getCompanyRevenue'] = $orgObject->getCompanyRevenue();
  $organization['getGovernmentRevenue'] = $orgObject->getGovernmentRevenue();
  $organization['getFiscalYearEnd'] = $orgObject->getFiscalYearEnd();
  $organization['getType'] = $orgObject->getType();
  $organization['getOrgRoster'] = $orgObject->getOrgRoster();

  return $organization;
}

/*
 * Publish/Unpublish community on the basis of end date from api.
 * Also store end date to drupal base. 
 */
function getCommitteePublishUnpublish() {

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'group')
    ->range(0, 50);

  $result = $query->execute();

  if (count($result) > 0) {

    $nodes = entity_load('node', array_keys($result['node']));

    foreach ($nodes as $key => $node) {
      if (has_committee_ended($node)) {
        $node->status = 0;
        node_save($node);
      }
    }
  }
}

/**
 * Returns whether the committee has ended.
 *
 * @param $node Committee node.
 * @return bool TRUE if ended, FALSE otherwise.
 */
function has_committee_ended($node) {
  return !empty($node->field_committee_end_date) && strtotime($node->field_committee_end_date['und'][0]['value']) < REQUEST_TIME;
}

/**
 * Implements hook_node_update().
 */
function committee_api_node_update($node) {

  if ($node->type == 'group' || $node->type == 'sub_community') {

    //Assign Leader to administer member role
    $field_leadership = field_get_items('node', $node, 'field_leadership');

    if (isset($node->field_leadership) && !empty($field_leadership)) {

      foreach ($field_leadership as $key => $value) {

        $leadership = entity_load('field_collection_item', array($value['value']));
        $leadership = $leadership[$value['value']];
        $field_leader = field_get_items('field_collection_item', $leadership, 'field_leader');

        if (sizeof($field_leader) > 0) {
          $uid = $field_leader[0]['target_id'];
          $account = user_load($uid);

          if ($uid) {

            $status = _avectra_user_membership_status($account, $node->nid);

            if ($status) {
              committee_api_update_user_role($node, $account);
            }
          }
        }
      }
    }
  }
}

/**
 * Grant a committee role to the user based on membership type.
 *
 * @param $node Node id of the committee.
 * @param $account User's account object.
 */
function committee_api_update_user_role($node, $account) {
  og_group('node', $node->nid, array(
    'entity type' => 'user',
    'entity' => $account,
    'membership type' => OG_MEMBERSHIP_TYPE_DEFAULT,
  ));

  if ($node->type == 'group') {
    og_role_grant('node', $node->nid, $account->uid, 3); // administer member role for community
    //drupal_set_message(t('Community Membership updated for @name',array('@name' => format_username($account))));
  }
  else {
    if ($node->type == 'sub_community') {
      og_role_grant('node', $node->nid, $account->uid, 48); // administer member role for sub community
      //drupal_set_message(t('Sub Community Membership updated for @name',array('@name' => format_username($account))));
    }
  }
}


/**
 * Implements hook_node_insert().
 */
function committee_api_node_insert($node) {
  if ($node->type == 'group' || $node->type == 'sub_community') {
    //Assign Leader to adminster member role
    $field_leadership = field_get_items('node', $node, 'field_leadership');
    if (isset($node->field_leadership) && !empty($field_leadership)) {
      foreach ($field_leadership as $key => $value) {
        $leadership = entity_load('field_collection_item', array($value['value']));
        $leadership = $leadership[$value['value']];
        $field_leader = field_get_items('field_collection_item', $leadership, 'field_leader');
        if (sizeof($field_leader) > 0) {
          $uid = $field_leader[0]['target_id'];
          $account = user_load($uid);
          if ($uid) {
            committee_api_update_user_role($node, $account);
          }
        }
      }
    }
  }
}


/**
 * Implements hook_node_presave().
 */
function committee_api_node_presave($node) {
  if ($node->type == 'group') {
    $node->status = 1;
    if (has_committee_ended($node)) {
      $node->status = 0;
    }
  }
}


/*
 * Implements hook_og_membership_presave().
 * 
 * Function to update user membership at avectra if user group membership updated
 */
function committee_api_og_membership_presave($og_membership) {
  $filter_nodetype = array('events', 'sub_community');
  // state : 1 : User status is Active in group
  // state : 2 : User status is Pending in group
  if (is_object($og_membership) && $og_membership->state == '1') {

    $uid = $og_membership->etid;
    $gid = $og_membership->gid;

    /*$debug = debug_backtrace();
    watchdog('debug - 0', serialize($debug[0]));
    watchdog('debug - 1', serialize($debug[1]));
    watchdog('debug - 2', serialize($debug[2]));
    watchdog('debug - 3', serialize($debug[3]));
    watchdog('debug - 4', serialize($debug[4]));
    watchdog('debug - 5', serialize($debug[5]));
    file_put_contents('/var/www/html/sites/default/files/output.log', 'aaaa' . time() . ' - ' . serialize($debug) . 'aaaa', FILE_APPEND | LOCK_EX);*/
    $group_type = node_type_by_nid($gid);
    watchdog('AvectraNomination', $group_type);
    if (!in_array($group_type, $filter_nodetype)) {
      _committe_api_process_user_avectra_membership('add', $uid, $gid);
	  }
  }
}

/*
 * Implements hook_og_membership_delete
 * 
 * Function to remove user membership at avectra if user left a group
 */
function committee_api_og_membership_delete($og_membership) {

  // state : 1 : User status is Active in group
  // state : 2 : User status is Pending in group
  if (is_object($og_membership) && $og_membership->state == '1') {

    $uid = $og_membership->etid;
    $gid = $og_membership->gid;

    _committe_api_process_user_avectra_membership('remove', $uid, $gid);
  }
}


/*
 * Function to update user membership at avectra 
 * 
 */
function _committe_api_process_user_avectra_membership($op, $uid, $cmt_nid) {
  $group_type = node_type_by_nid($cmt_nid);
  
  watchdog('AvectraNomination in API', $group_type);
  
  module_load_include('php', 'avectra', 'includes/ACT');

  $act = new ACT(SOAPURL, XWEBUSER, XWEBPASS);

  $nom_status = FALSE;

  $account = user_load($uid);
  $committe = node_load($cmt_nid);

  $cmt_key = @$committe->field_community_key[LANGUAGE_NONE][0]['value'];
  $cust_key = @$account->field_customer_key[LANGUAGE_NONE][0]['value'];

  if ($cmt_key != '') {
    $positionkey = (string) $act->getCommitteePositionKeyFromName($cmt_key, 'Member');
  }

  if ($cmt_key == '' || $cust_key == '' || $positionkey == '') {
    return FALSE;
  }

  $nom_status = $act->isUserNominatedForCommittee($cust_key, $cmt_key);
  //drupal_set_message('Nomination status: ' . $nom_status);

  $membership_status = $act->isUserInCommittee($cust_key, $cmt_key);
  //drupal_set_message('Membership status: ' . $membership_status);

  // If user is already member at avectra and drupal try to add membership then return
  if (($membership_status || $nom_status) && $op == 'add') {
    return FALSE;
  }

  $status = FALSE;

  switch ($op) {

    case 'add':
      //drupal_set_message('Adding user to the committee');

      $now = date('m/d/Y', time());
      $status = $act->addUserToCommittee($cmt_key, $cust_key, $positionkey, $now);
      //drupal_set_message('Status returned by Avectra API: ' . $status);
      if ($status) {
        $status = $act->isUserInCommittee($cust_key, $cmt_key);
        //drupal_set_message('Is user in committee: ' . $status);
      }
      break;

    case 'remove':
      break;

    default:
      break;
  }

  return $status;
}


/**
 * Get all users of a group
 */
function _get_users_in_group($gid) {

  $query = db_select('users', 'u')
    ->condition('u.uid', 0, '<>')
    ->condition('u.status', 1, '=')
    ->fields('u', array('uid'));
  $query->join('og_membership', 'ogm', "ogm.gid = :gid AND u.uid = ogm.etid AND ogm.entity_type = 'user'", array(':gid' => $gid));
  $query->join('node', 'node', "node.nid = :gid AND node.type = 'group'", array(':gid' => $gid));

  return $query->execute()->fetchCol();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function committee_api_form_og_ui_confirm_subscribe_alter(&$form, &$form_state) {
  $entity = $form['#entity'];
  $group_type = $entity->group_type;
  $gid = $entity->gid;
  if ($group_type != 'node') {
    return;
  }

  $node = node_load($gid);
  if ($node->type != 'group') {
    return;
  }

  // Now we know that the user is subscribing to a group.
  unset($form['#submit']);
  $form['#submit'][] = 'committee_api_subscribe_user_to_committee';
}

/**
 * Submit handler for committee join.
 */
function committee_api_subscribe_user_to_committee($form, &$form_state) {
  $uid = $form['#entity']->etid;
  $gid = $form_state['values']['gid'];
  $status = _committe_api_process_user_avectra_membership('add', $uid, $gid);
  if ($status) {
    og_ui_confirm_subscribe_submit($form, $form_state);
  }
  else {
    drupal_set_message(t('Your membership request has been received. We will get back to you shortly.'));
    $form_state['redirect'] = 'node/' . $gid;
  }
}
