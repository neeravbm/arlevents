<?php
/*
 * @file
 *   ACT Committee API
 */


/*
 * Get uid from key;
 * @para $key
 *   customer key
 * @return $user_id;
 *   user id
 */
function getUidByKey($key) {
  $uid = array();
  $user_id = '';
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'user')
    ->entityCondition('bundle', 'user')
    //->propertyCondition('status', 1)
    ->fieldCondition('field_customer_key', 'value', $key, '=');
  $result = $query->execute();
  if (isset($result['user'])) {
    $uid = array_keys($result['user']);
  }
  if (isset($uid[0])) {
    $user_id = $uid[0];
  }

  return $user_id != '' ? $user_id : NULL;
}


/*
 * Get group id from key;
 * @para $key
 *   group key
 * @return $gid;
 *   group id
 */
function getGidByKey($key) {

  $gid = '';

  $query = db_select('node', 'node');
  $query->join('field_data_field_community_key', 'field_community_key', 'field_community_key.entity_id = node.nid');
  $query->condition('field_community_key.field_community_key_value', $key)
    ->fields('node', array('nid'));
  $result = $query->execute()->fetchCol();

  if (!empty($result)) {
    $gid = current($result);
  }

  return $gid;
}



/**
 * function to get node type by node nid
 * @para $nid
 *   node nid
 * @return $nodetype
 *   node type (i.e. page, events or group)
 */
function node_type_by_nid($nid) {
  $nodetype = db_select('node', 'node')
    ->fields('node', array('type'))
    ->condition('node.nid', $nid, '=')
    ->execute()
    ->fetchField();
  return $nodetype;
}


/**
 * function to get node title by node nid
 * @para $nid
 *   node nid
 * @return $nodetitle
 *   node title
 */
function node_title_by_nid($nid) {
  $nodetitle = db_select('node', 'node')
    ->fields('node', array('title'))
    ->condition('node.nid', $nid, '=')
    ->execute()
    ->fetchField();
  return $nodetitle;
}


/*
 * function to Delete an association (e.g. unsubscribe) of an entity to a group.
 */
function communitee_api_ungroup_user($account, $getCommitteesForUserObj) {
  $output = '';
  $user_groups = '';
  $gid_key_arr = array();
  $user_groups = og_get_groups_by_user($account);
  if (sizeof($getCommitteesForUserObj)) {
    foreach ($getCommitteesForUserObj as $k => $v) {
      $cKey = (string) $v;
      $gid = getGidByKey($cKey);
      $gid_key_arr[$gid] = $gid;
    }
  }

  //Delete an association (e.g. unsubscribe) of an entity to a group.
  if (!empty($user_groups) && sizeof($user_groups['node']) > 0) {
    //if(array_key_exists('node', $user_groups) && sizeof($user_groups['node']) > 0){
    foreach ($user_groups['node'] as $key => $val) {
      //$node = node_load($val);
      // get node type of this group
      $nodetype = node_type_by_nid($val);
      if ($nodetype == 'group') {
        if (!in_array($val, $gid_key_arr)) {
          og_ungroup('node', $val, 'user', $account->uid);
        }
      }
    }
  }

  return $output;
}


/*
 * Publish/Unpublish community on the basis of end date from api.
 * Also store end date to drupal base. 
 */
function getCommitteePublishUnpublish() {

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'group')
    ->range(0, 50);

  $result = $query->execute();

  if (count($result) > 0) {

    $nodes = entity_load('node', array_keys($result['node']));

    foreach ($nodes as $key => $node) {
      if (has_committee_ended($node)) {
        $node->status = 0;
        node_save($node);
      }
    }
  }
}

/**
 * Returns whether the committee has ended.
 *
 * @param $node Committee node.
 * @return bool TRUE if ended, FALSE otherwise.
 */
function has_committee_ended($node) {
  return !empty($node->field_committee_end_date) && strtotime($node->field_committee_end_date['und'][0]['value']) < REQUEST_TIME;
}

/**
 * Implements hook_node_update().
 */
function committee_api_node_update($node) {

  if ($node->type == 'group' || $node->type == 'sub_community') {

    //Assign Leader to administer member role
    $field_leadership = field_get_items('node', $node, 'field_leadership');

    if (isset($node->field_leadership) && !empty($field_leadership)) {

      foreach ($field_leadership as $key => $value) {

        $leadership = entity_load('field_collection_item', array($value['value']));
        $leadership = $leadership[$value['value']];
        $field_leader = field_get_items('field_collection_item', $leadership, 'field_leader');

        if (sizeof($field_leader) > 0) {
          $uid = $field_leader[0]['target_id'];
          $account = user_load($uid);

          if ($uid) {

            $status = FALSE;
            
			if ($node->type == 'sub_community' || $node->type == 'group') {
              $status = og_is_member('node', $node->nid, 'user', $account);
            }

            if ($status) {
              committee_api_update_user_role($node, $account);
            }
          }
        }
      }
    }
  }
}

/**
 * Grant a committee role to the user based on membership type.
 *
 * @param $node Node id of the committee.
 * @param $account User's account object.
 */
function committee_api_update_user_role($node, $account) {
  og_group('node', $node->nid, array(
    'entity type' => 'user',
    'entity' => $account,
    'membership type' => OG_MEMBERSHIP_TYPE_DEFAULT,
  ));

  if ($node->type == 'group') {
    og_role_grant('node', $node->nid, $account->uid, 3); // administer member role for community
    //drupal_set_message(t('Community Membership updated for @name',array('@name' => format_username($account))));
  }
  else {
    if ($node->type == 'sub_community') {
      drupal_set_message(t('Adding @uid to @nid', array('@uid' => $uid, '@nid' => $node->nid)));
      og_role_grant('node', $node->nid, $account->uid, 48); // administer member role for sub community
      //drupal_set_message(t('Sub Community Membership updated for @name',array('@name' => format_username($account))));
    }
  }
}


/**
 * Implements hook_node_insert().
 */
function committee_api_node_insert($node) {
  if ($node->type == 'group' || $node->type == 'sub_community') {
    //Assign Leader to adminster member role
    $field_leadership = field_get_items('node', $node, 'field_leadership');
    if (isset($node->field_leadership) && !empty($field_leadership)) {
      foreach ($field_leadership as $key => $value) {
        $leadership = entity_load('field_collection_item', array($value['value']));
        $leadership = $leadership[$value['value']];
        $field_leader = field_get_items('field_collection_item', $leadership, 'field_leader');
        if (sizeof($field_leader) > 0) {
          $uid = $field_leader[0]['target_id'];
          $account = user_load($uid);
          if ($uid) {
            committee_api_update_user_role($node, $account);
          }
        }
      }
    }
  }
}


/**
 * Implements hook_node_presave().
 */
function committee_api_node_presave($node) {
  if ($node->type == 'group') {
    $node->status = 1;
    if (has_committee_ended($node)) {
      $node->status = 0;
    }
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function committee_api_form_og_ui_confirm_unsubscribe_alter(&$form, &$form_state) {
  // Add a submit handler at the end so that an email can be sent to the admin to manually unsubscribe the user.
  $form['#submit'][] = 'committee_api_unsubscribe_submit';
}


/**
 * Sends an email to the administrator asking to remove the user from the group in NetForum.
 */
function committee_api_unsubscribe_submit($form, &$form_state) {
  $committee = $form_state['values']['group'];
  global $user;
  $params = array(
    'account' => $user,
    'committee' => $committee,
  );
  drupal_mail('committee_api', 'delete_membership', 'laura@arltechgroup.com', language_default(), $params);
}


/**
 * Implements hook_mail().
 */
function committee_api_mail($key, &$message, $params) {
  switch ($key) {
    case 'delete_membership':
      $account = $params['account'];
      $committee = $params['committee'];

      $field_community_key = field_get_items('node', $committee, 'field_community_key');
      $committee_key = !empty($field_community_key[0]['value']) ? $field_community_key[0]['value'] : '';

      $field_customer_key = field_get_items('user', $account, 'field_customer_key');
      $customer_key = !empty($field_customer_key[0]['value']) ? $field_customer_key[0]['value'] : '';

      $field_first_name = field_get_items('user', $account, 'field_name_first');
      $first_name = !empty($field_first_name[0]['safe_value']) ? $field_first_name[0]['safe_value'] : '';

      $field_last_name = field_get_items('user', $account, 'field_name_last');
      $last_name = !empty($field_last_name[0]['safe_value']) ? $field_last_name[0]['safe_value'] : '';

      $account_name = $first_name . ((!empty($first_name) && !empty($last_name)) ? ' ' : '') . $last_name;

      $message['subject'] = t('Request to unsubscribe');

      $message['body'][] = t('@account_name (key: @account_key) has requested to be removed from the group @committee_name (key: @committee_key).', array(
        '@account_name' => $account_name,
        '@account_key' => $customer_key,
        '@committee_name' => $committee->title,
        '@committee_key' => $committee_key,
      ));

      break;
  }
}


/**
 * Get all users of a group
 */
function _get_users_in_group($gid) {

  $query = db_select('users', 'u')
    ->condition('u.uid', 0, '<>')
    ->condition('u.status', 1, '=')
    ->fields('u', array('uid'));
  $query->join('og_membership', 'ogm', "ogm.gid = :gid AND u.uid = ogm.etid AND ogm.entity_type = 'user'", array(':gid' => $gid));
  $query->join('node', 'node', "node.nid = :gid AND node.type = 'group'", array(':gid' => $gid));

  return $query->execute()->fetchCol();
}
